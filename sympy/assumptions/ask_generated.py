from sympy.logic.boolalg import And, Not, Or
from sympy.assumptions.ask import Q

# -{ Known facts in CNF }-
known_facts_cnf = And(
    Or(Not(Q.negative), Q.nonzero),
    Or(Not(Q.composite), Not(Q.prime)),
    Or(Not(Q.prime), Q.positive),
    Or(Not(Q.real), Q.extended_real),
    Or(Not(Q.nonzero), Q.real),
    Or(Not(Q.extended_real), Q.infinity, Q.real),
    Or(Not(Q.irrational), Not(Q.rational)),
    Or(Not(Q.diagonal), Q.lower_triangular),
    Or(Not(Q.imaginary), Not(Q.real)),
    Or(Not(Q.even), Q.integer),
    Or(Not(Q.real), Q.complex),
    Or(Not(Q.lower_triangular), Not(Q.upper_triangular), Q.diagonal),
    Or(Not(Q.imaginary), Q.complex),
    Or(Not(Q.positive), Q.nonzero),
    Or(Not(Q.infinity), Q.extended_real),
    Or(Not(Q.negative), Not(Q.positive)),
    Or(Not(Q.real), Q.hermitian),
    Or(Not(Q.diagonal), Q.upper_triangular),
    Or(Not(Q.orthogonal), Q.positive_definite),
    Or(Not(Q.upper_triangular), Q.triangular),
    Or(Not(Q.irrational), Q.real),
    Or(Not(Q.prime), Q.integer),
    Or(Not(Q.integer), Not(Q.positive), Q.composite, Q.prime),
    Or(Not(Q.antihermitian), Not(Q.hermitian)),
    Or(Not(Q.rational), Q.real),
    Or(Not(Q.nonzero), Q.negative, Q.positive),
    Or(Not(Q.odd), Q.integer),
    Or(Not(Q.lower_triangular), Q.triangular),
    Or(Not(Q.real), Q.irrational, Q.rational),
    Or(Not(Q.integer), Q.even, Q.odd),
    Or(Not(Q.imaginary), Q.antihermitian),
    Or(Not(Q.integer), Q.rational),
    Or(Not(Q.triangular), Q.lower_triangular, Q.upper_triangular),
    Or(Not(Q.even), Not(Q.odd)),
    Or(Not(Q.positive_definite), Q.invertible)
)

# -{ Known facts in compressed sets }-
known_facts_dict = {
    Q.symmetric: set([Q.symmetric]),
    Q.invertible: set([Q.invertible]),
    Q.odd: set([Q.complex, Q.odd, Q.hermitian, Q.real, Q.rational,
        Q.extended_real, Q.integer]),
    Q.upper_triangular: set([Q.upper_triangular, Q.triangular]),
    Q.diagonal: set([Q.upper_triangular, Q.diagonal, Q.triangular,
        Q.lower_triangular]),
    Q.antihermitian: set([Q.antihermitian]),
    Q.infinitesimal: set([Q.infinitesimal]),
    Q.even: set([Q.complex, Q.real, Q.hermitian, Q.even, Q.rational,
        Q.extended_real, Q.integer]),
    Q.hermitian: set([Q.hermitian]),
    Q.bounded: set([Q.bounded]),
    Q.positive_definite: set([Q.invertible, Q.positive_definite]),
    Q.nonzero: set([Q.nonzero, Q.complex, Q.extended_real, Q.real,
        Q.hermitian]),
    Q.algebraic: set([Q.algebraic]),
    Q.orthogonal: set([Q.orthogonal, Q.invertible, Q.positive_definite]),
    Q.is_true: set([Q.is_true]),
    Q.real: set([Q.real, Q.complex, Q.extended_real, Q.hermitian]),
    Q.rational: set([Q.real, Q.rational, Q.complex, Q.extended_real,
        Q.hermitian]),
    Q.extended_real: set([Q.extended_real]),
    Q.integer: set([Q.complex, Q.hermitian, Q.real, Q.rational,
        Q.extended_real, Q.integer]),
    Q.commutative: set([Q.commutative]),
    Q.infinity: set([Q.extended_real, Q.infinity]),
    Q.complex: set([Q.complex]),
    Q.lower_triangular: set([Q.triangular, Q.lower_triangular]),
    Q.positive: set([Q.complex, Q.positive, Q.nonzero, Q.hermitian,
        Q.real, Q.extended_real]),
    Q.composite: set([Q.composite]),
    Q.triangular: set([Q.triangular]),
    Q.prime: set([Q.complex, Q.positive, Q.real, Q.hermitian, Q.prime,
        Q.rational, Q.extended_real, Q.nonzero, Q.integer]),
    Q.negative: set([Q.complex, Q.nonzero, Q.hermitian, Q.real,
        Q.negative, Q.extended_real]),
    Q.irrational: set([Q.real, Q.irrational, Q.complex, Q.extended_real,
        Q.hermitian]),
    Q.unit_triangular: set([Q.unit_triangular]),
    Q.imaginary: set([Q.antihermitian, Q.complex, Q.imaginary])
}